// ========================================
// ArbiInvest - –ú–æ–¥—É–ª—å –∫–æ—à–µ–ª—å–∫–∞
// ========================================

class WalletModule {
    constructor(app) {
        this.app = app;
        this.walletAddress = null;
        this.balance = 0;
        this.tokens = [];
        this.updateInterval = null;
        this.bscApiKey = 'RAI3FTD9W53JPYZ2AHW8IBH9BXUC71NRH1';
        this.bscApiUrl = 'https://api.bscscan.com/api';
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è
    async init() {
        console.log('üíº –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Wallet –º–æ–¥—É–ª—è...');
        this.walletAddress = localStorage.getItem('robot_wallet') || null;
        
        if (this.walletAddress) {
            await this.loadWalletData();
        }
        
        this.bindEvents();
        this.startUpdates();
        return true;
    }
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–∞
    async loadWalletData() {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å BNB
            await this.updateBalance();
            
            // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã
            await this.loadTokens();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            this.updateUI();
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–∞:', error);
        }
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
    async updateBalance() {
        if (!this.walletAddress) return;
        
        try {
            const response = await fetch(`${this.bscApiUrl}?module=account&action=balance&address=${this.walletAddress}&apikey=${this.bscApiKey}`);
            const data = await response.json();
            
            if (data.status === '1') {
                this.balance = parseFloat(data.result) / 1e18; // Wei to BNB
                this.updateBalanceDisplay();
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error);
        }
    }
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
    async loadTokens() {
        if (!this.walletAddress) return;
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ BEP-20
            const response = await fetch(`${this.bscApiUrl}?module=account&action=tokentx&address=${this.walletAddress}&startblock=0&endblock=99999999&sort=desc&apikey=${this.bscApiKey}`);
            const data = await response.json();
            
            if (data.status === '1' && data.result) {
                // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã –ø–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º
                const tokenMap = new Map();
                
                data.result.forEach(tx => {
                    if (!tokenMap.has(tx.contractAddress)) {
                        tokenMap.set(tx.contractAddress, {
                            address: tx.contractAddress,
                            symbol: tx.tokenSymbol,
                            name: tx.tokenName,
                            decimals: parseInt(tx.tokenDecimal),
                            balance: 0
                        });
                    }
                });
                
                this.tokens = Array.from(tokenMap.values());
                
                // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å—ã —Ç–æ–∫–µ–Ω–æ–≤
                await this.updateTokenBalances();
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error);
        }
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤
    async updateTokenBalances() {
        // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤
        // –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        this.tokens = this.tokens.slice(0, 5).map(token => ({
            ...token,
            balance: Math.random() * 1000,
            value: Math.random() * 1000
        }));
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
    updateBalanceDisplay() {
        const balanceElements = document.querySelectorAll('[data-wallet-balance]');
        balanceElements.forEach(el => {
            el.textContent = this.balance.toFixed(4);
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º USD —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç (–ø—Ä–∏–º–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞ BNB)
        const bnbPrice = 250; // –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞
        const usdValue = this.balance * bnbPrice;
        
        const usdElements = document.querySelectorAll('[data-wallet-usd]');
        usdElements.forEach(el => {
            el.textContent = `‚âà $${usdValue.toFixed(2)}`;
        });
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
    updateUI() {
        const walletSection = document.getElementById('wallet');
        if (!walletSection) return;
        
        if (!this.walletAddress) {
            walletSection.innerHTML = this.renderConnectWallet();
        } else {
            walletSection.innerHTML = this.renderWalletInfo();
        }
    }
    
    // –†–µ–Ω–¥–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞
    renderConnectWallet() {
        return `
            <div class="wallet-connect">
                <div class="connect-icon">üíº</div>
                <h2>–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫ —Ä–æ–±–æ—Ç–∞</h2>
                <p>–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–≥–æ —Ä–æ–±–æ—Ç–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</p>
                <div class="connect-form">
                    <input type="text" 
                           id="wallet-input" 
                           class="wallet-input" 
                           placeholder="0x..." 
                           maxlength="42">
                    <button class="btn btn-primary" onclick="window.walletModule.connectWallet()">
                        –ü–æ–¥–∫–ª—é—á–∏—Ç—å
                    </button>
                </div>
            </div>
        `;
    }
    
    // –†–µ–Ω–¥–µ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ—à–µ–ª—å–∫–µ
    renderWalletInfo() {
        return `
            <div class="wallet-info">
                <div class="wallet-header">
                    <h2>–ö–æ—à–µ–ª–µ–∫ —Ä–æ–±–æ—Ç–∞</h2>
                    <button class="btn btn-secondary" onclick="window.walletModule.disconnectWallet()">
                        –û—Ç–∫–ª—é—á–∏—Ç—å
                    </button>
                </div>
                
                <div class="wallet-address">
                    <span class="label">–ê–¥—Ä–µ—Å:</span>
                    <span class="address">${this.formatAddress(this.walletAddress)}</span>
                    <button class="copy-btn" onclick="window.walletModule.copyAddress()">
                        üìã
                    </button>
                </div>
                
                <div class="wallet-balance">
                    <div class="balance-card">
                        <div class="balance-label">–ë–∞–ª–∞–Ω—Å BNB</div>
                        <div class="balance-value">
                            <span data-wallet-balance>${this.balance.toFixed(4)}</span> BNB
                        </div>
                        <div class="balance-usd" data-wallet-usd>‚âà $${(this.balance * 250).toFixed(2)}</div>
                    </div>
                </div>
                
                <div class="wallet-tokens">
                    <h3>–¢–æ–∫–µ–Ω—ã</h3>
                    <div class="tokens-list">
                        ${this.renderTokensList()}
                    </div>
                </div>
                
                <div class="wallet-actions">
                    <button class="btn btn-primary" onclick="window.walletModule.refresh()">
                        –û–±–Ω–æ–≤–∏—Ç—å
                    </button>
                    <a href="https://bscscan.com/address/${this.walletAddress}" 
                       target="_blank" 
                       class="btn btn-secondary">
                        –û—Ç–∫—Ä—ã—Ç—å –≤ BSCScan
                    </a>
                </div>
            </div>
        `;
    }
    
    // –†–µ–Ω–¥–µ—Ä —Å–ø–∏—Å–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
    renderTokensList() {
        if (this.tokens.length === 0) {
            return '<div class="no-tokens">–ù–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤</div>';
        }
        
        return this.tokens.map(token => `
            <div class="token-item">
                <div class="token-info">
                    <div class="token-symbol">${token.symbol}</div>
                    <div class="token-name">${token.name}</div>
                </div>
                <div class="token-balance">
                    <div class="token-amount">${token.balance?.toFixed(2) || '0'}</div>
                    <div class="token-value">‚âà $${token.value?.toFixed(2) || '0'}</div>
                </div>
            </div>
        `).join('');
    }
    
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞
    async connectWallet() {
        const input = document.getElementById('wallet-input');
        if (!input) return;
        
        const address = input.value.trim();
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∞–¥—Ä–µ—Å–∞
        if (!this.isValidAddress(address)) {
            if (window.app && window.app.showNotification) {
                window.app.showNotification('error', '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞');
            }
            return;
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å
        this.walletAddress = address;
        localStorage.setItem('robot_wallet', address);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        await this.loadWalletData();
        
        if (window.app && window.app.showNotification) {
            window.app.showNotification('success', '–ö–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω');
        }
    }
    
    // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞
    disconnectWallet() {
        this.walletAddress = null;
        this.balance = 0;
        this.tokens = [];
        
        localStorage.removeItem('robot_wallet');
        
        this.updateUI();
        
        if (window.app && window.app.showNotification) {
            window.app.showNotification('info', '–ö–æ—à–µ–ª–µ–∫ –æ—Ç–∫–ª—é—á–µ–Ω');
        }
    }
    
    // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞
    copyAddress() {
        if (!this.walletAddress) return;
        
        navigator.clipboard.writeText(this.walletAddress).then(() => {
            if (window.app && window.app.showNotification) {
                window.app.showNotification('success', '–ê–¥—Ä–µ—Å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω');
            }
        });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∞–¥—Ä–µ—Å–∞
    isValidAddress(address) {
        return /^0x[a-fA-F0-9]{40}$/.test(address);
    }
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞
    formatAddress(address) {
        if (!address) return '';
        return `${address.slice(0, 6)}...${address.slice(-4)}`;
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    async refresh() {
        await this.loadWalletData();
        
        if (window.app && window.app.showNotification) {
            window.app.showNotification('success', '–î–∞–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
        }
    }
    
    // –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
    bindEvents() {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Enter
        document.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                const input = document.getElementById('wallet-input');
                if (input && document.activeElement === input) {
                    this.connectWallet();
                }
            }
        });
    }
    
    // –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    startUpdates() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        this.updateInterval = setInterval(() => {
            if (this.walletAddress) {
                this.updateBalance();
            }
        }, 30000);
    }
    
    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    stopUpdates() {
        if (this.updateInterval) {
            clearInterval(this.updateInterval);
            this.updateInterval = null;
        }
    }
    
    // –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –º–æ–¥—É–ª—è
    destroy() {
        this.stopUpdates();
    }
}

// –î–µ–ª–∞–µ–º –º–æ–¥—É–ª—å –¥–æ—Å—Ç—É–ø–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω–æ
window.WalletModule = WalletModule;
window.walletModule = null; // –ë—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ app.js