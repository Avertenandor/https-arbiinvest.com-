// ========================================
// ArbiInvest - –ú–æ–¥—É–ª—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
// ========================================

class TransactionsModule {
    constructor(app) {
        this.app = app;
        this.transactions = [];
        this.filteredTransactions = [];
        this.currentPage = 1;
        this.itemsPerPage = 20;
        this.filters = {
            type: 'all',
            status: 'all',
            dateFrom: null,
            dateTo: null
        };
        this.updateInterval = null;
        this.bscApiKey = 'RAI3FTD9W53JPYZ2AHW8IBH9BXUC71NRH1';
        this.bscApiUrl = 'https://api.bscscan.com/api';
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è
    async init() {
        console.log('üìù –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Transactions –º–æ–¥—É–ª—è...');
        await this.loadTransactions();
        this.bindEvents();
        this.startUpdates();
        return true;
    }
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    async loadTransactions() {
        const walletAddress = localStorage.getItem('robot_wallet');
        
        if (!walletAddress) {
            this.transactions = this.generateMockTransactions(50);
        } else {
            await this.loadRealTransactions(walletAddress);
        }
        
        this.applyFilters();
        this.updateUI();
    }
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    async loadRealTransactions(address) {
        try {
            // –û–±—ã—á–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            const txResponse = await fetch(`${this.bscApiUrl}?module=account&action=txlist&address=${address}&startblock=0&endblock=99999999&page=1&offset=100&sort=desc&apikey=${this.bscApiKey}`);
            const txData = await txResponse.json();
            
            // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            const internalResponse = await fetch(`${this.bscApiUrl}?module=account&action=txlistinternal&address=${address}&startblock=0&endblock=99999999&page=1&offset=100&sort=desc&apikey=${this.bscApiKey}`);
            const internalData = await internalResponse.json();
            
            // –¢–æ–∫–µ–Ω —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            const tokenResponse = await fetch(`${this.bscApiUrl}?module=account&action=tokentx&address=${address}&startblock=0&endblock=99999999&page=1&offset=100&sort=desc&apikey=${this.bscApiKey}`);
            const tokenData = await tokenResponse.json();
            
            // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            this.transactions = this.formatBSCTransactions([
                ...(txData.result || []),
                ...(internalData.result || []),
                ...(tokenData.result || [])
            ]);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error);
            this.transactions = this.generateMockTransactions(20);
        }
    }
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π BSC
    formatBSCTransactions(rawTransactions) {
        const walletAddress = localStorage.getItem('robot_wallet')?.toLowerCase();
        
        return rawTransactions
            .map(tx => ({
                hash: tx.hash,
                type: this.getTransactionType(tx, walletAddress),
                status: tx.isError === '0' ? 'success' : 'failed',
                amount: this.formatAmount(tx),
                token: tx.tokenSymbol || 'BNB',
                from: tx.from,
                to: tx.to,
                timestamp: parseInt(tx.timeStamp),
                gasPrice: parseFloat(tx.gasPrice || 0) / 1e9,
                gasUsed: parseInt(tx.gasUsed || 0),
                profit: this.calculateProfit(tx),
                method: tx.functionName || 'Transfer'
            }))
            .sort((a, b) => b.timestamp - a.timestamp);
    }
    
    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    getTransactionType(tx, walletAddress) {
        if (!walletAddress) return 'unknown';
        
        const from = tx.from?.toLowerCase();
        const to = tx.to?.toLowerCase();
        
        if (from === walletAddress && to === walletAddress) return 'self';
        if (from === walletAddress) return 'out';
        if (to === walletAddress) return 'in';
        
        // –î–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        if (tx.functionName?.includes('swap')) return 'swap';
        if (tx.functionName?.includes('arbitrage')) return 'arbitrage';
        
        return 'contract';
    }
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–º–º—ã
    formatAmount(tx) {
        if (tx.value) {
            return parseFloat(tx.value) / 1e18;
        }
        if (tx.tokenDecimal && tx.value) {
            return parseFloat(tx.value) / Math.pow(10, parseInt(tx.tokenDecimal));
        }
        return 0;
    }
    
    // –†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏ (–ø—Ä–∏–º–µ—Ä–Ω—ã–π)
    calculateProfit(tx) {
        // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏–±—ã–ª–∏
        // –î–ª—è –¥–µ–º–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        if (tx.functionName?.includes('arbitrage')) {
            return Math.random() * 0.1;
        }
        return 0;
    }
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–∫–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    generateMockTransactions(count) {
        const transactions = [];
        const types = ['in', 'out', 'swap', 'arbitrage', 'contract'];
        const tokens = ['BNB', 'BUSD', 'USDT', 'CAKE', 'ETH'];
        const methods = ['Transfer', 'Swap', 'Arbitrage', 'Approve', 'Deposit'];
        
        for (let i = 0; i < count; i++) {
            const type = types[Math.floor(Math.random() * types.length)];
            const isArbitrage = type === 'arbitrage';
            
            transactions.push({
                hash: '0x' + Math.random().toString(16).substr(2, 64),
                type: type,
                status: Math.random() > 0.1 ? 'success' : 'failed',
                amount: Math.random() * 10,
                token: tokens[Math.floor(Math.random() * tokens.length)],
                from: '0x' + Math.random().toString(16).substr(2, 40),
                to: '0x' + Math.random().toString(16).substr(2, 40),
                timestamp: Date.now() / 1000 - Math.random() * 86400 * 30,
                gasPrice: 3 + Math.random() * 2,
                gasUsed: 21000 + Math.floor(Math.random() * 100000),
                profit: isArbitrage ? Math.random() * 0.1 : 0,
                method: methods[Math.floor(Math.random() * methods.length)]
            });
        }
        
        return transactions.sort((a, b) => b.timestamp - a.timestamp);
    }
    
    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    applyFilters() {
        this.filteredTransactions = this.transactions.filter(tx => {
            // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É
            if (this.filters.type !== 'all' && tx.type !== this.filters.type) {
                return false;
            }
            
            // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
            if (this.filters.status !== 'all' && tx.status !== this.filters.status) {
                return false;
            }
            
            // –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ
            if (this.filters.dateFrom && tx.timestamp < this.filters.dateFrom) {
                return false;
            }
            if (this.filters.dateTo && tx.timestamp > this.filters.dateTo) {
                return false;
            }
            
            return true;
        });
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
    updateUI() {
        const transactionsSection = document.getElementById('transactions');
        if (!transactionsSection) return;
        
        transactionsSection.innerHTML = this.render();
        this.bindTableEvents();
    }
    
    // –†–µ–Ω–¥–µ—Ä –º–æ–¥—É–ª—è
    render() {
        const startIndex = (this.currentPage - 1) * this.itemsPerPage;
        const endIndex = startIndex + this.itemsPerPage;
        const pageTransactions = this.filteredTransactions.slice(startIndex, endIndex);
        const totalPages = Math.ceil(this.filteredTransactions.length / this.itemsPerPage);
        
        return `
            <div class="transactions-section">
                <div class="section-header">
                    <h2>–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π</h2>
                    <div class="header-actions">
                        <button class="btn btn-secondary" onclick="window.transactionsModule.exportTransactions()">
                            –≠–∫—Å–ø–æ—Ä—Ç CSV
                        </button>
                        <button class="btn btn-primary" onclick="window.transactionsModule.refresh()">
                            –û–±–Ω–æ–≤–∏—Ç—å
                        </button>
                    </div>
                </div>
                
                <div class="filters-bar">
                    <select class="filter-select" id="filter-type">
                        <option value="all">–í—Å–µ —Ç–∏–ø—ã</option>
                        <option value="in">–í—Ö–æ–¥—è—â–∏–µ</option>
                        <option value="out">–ò—Å—Ö–æ–¥—è—â–∏–µ</option>
                        <option value="swap">–û–±–º–µ–Ω</option>
                        <option value="arbitrage">–ê—Ä–±–∏—Ç—Ä–∞–∂</option>
                    </select>
                    
                    <select class="filter-select" id="filter-status">
                        <option value="all">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</option>
                        <option value="success">–£—Å–ø–µ—à–Ω—ã–µ</option>
                        <option value="failed">–ù–µ—É–¥–∞—á–Ω—ã–µ</option>
                    </select>
                    
                    <input type="date" class="filter-date" id="filter-date-from" placeholder="–û—Ç">
                    <input type="date" class="filter-date" id="filter-date-to" placeholder="–î–æ">
                    
                    <button class="btn btn-secondary" onclick="window.transactionsModule.resetFilters()">
                        –°–±—Ä–æ—Å–∏—Ç—å
                    </button>
                </div>
                
                <div class="transactions-stats">
                    <div class="stat-item">
                        <span class="stat-label">–í—Å–µ–≥–æ:</span>
                        <span class="stat-value">${this.transactions.length}</span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-label">–£—Å–ø–µ—à–Ω—ã—Ö:</span>
                        <span class="stat-value text-success">
                            ${this.transactions.filter(tx => tx.status === 'success').length}
                        </span>
                    </div>
                    <div class="stat-item">
                        <span class="stat-label">–ü—Ä–∏–±—ã–ª—å:</span>
                        <span class="stat-value text-success">
                            ${this.calculateTotalProfit().toFixed(4)} BNB
                        </span>
                    </div>
                </div>
                
                <div class="transactions-table-container">
                    <table class="transactions-table">
                        <thead>
                            <tr>
                                <th>–í—Ä–µ–º—è</th>
                                <th>–¢–∏–ø</th>
                                <th>–•—ç—à</th>
                                <th>–°—É–º–º–∞</th>
                                <th>–ü—Ä–∏–±—ã–ª—å</th>
                                <th>Gas</th>
                                <th>–°—Ç–∞—Ç—É—Å</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            ${pageTransactions.map(tx => this.renderTransactionRow(tx)).join('')}
                        </tbody>
                    </table>
                    
                    ${pageTransactions.length === 0 ? '<div class="no-data">–ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π</div>' : ''}
                </div>
                
                <div class="pagination">
                    <button class="pagination-btn" 
                            onclick="window.transactionsModule.goToPage(${this.currentPage - 1})"
                            ${this.currentPage === 1 ? 'disabled' : ''}>
                        ‚Üê
                    </button>
                    
                    <span class="pagination-info">
                        –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${this.currentPage} –∏–∑ ${totalPages || 1}
                    </span>
                    
                    <button class="pagination-btn" 
                            onclick="window.transactionsModule.goToPage(${this.currentPage + 1})"
                            ${this.currentPage === totalPages ? 'disabled' : ''}>
                        ‚Üí
                    </button>
                </div>
            </div>
        `;
    }
    
    // –†–µ–Ω–¥–µ—Ä —Å—Ç—Ä–æ–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    renderTransactionRow(tx) {
        const typeIcon = {
            'in': 'üì•',
            'out': 'üì§',
            'swap': 'üîÑ',
            'arbitrage': '‚ö°',
            'contract': 'üìú',
            'self': 'üîÅ'
        };
        
        const statusClass = tx.status === 'success' ? 'success' : 'failed';
        const profitClass = tx.profit > 0 ? 'positive' : tx.profit < 0 ? 'negative' : '';
        
        return `
            <tr class="transaction-row">
                <td>${this.formatDate(tx.timestamp)}</td>
                <td>
                    <span class="tx-type">
                        ${typeIcon[tx.type] || '‚ùì'} ${this.getTypeLabel(tx.type)}
                    </span>
                </td>
                <td>
                    <a href="https://bscscan.com/tx/${tx.hash}" 
                       target="_blank" 
                       class="tx-hash">
                        ${this.formatHash(tx.hash)}
                    </a>
                </td>
                <td>${tx.amount.toFixed(4)} ${tx.token}</td>
                <td class="${profitClass}">
                    ${tx.profit !== 0 ? (tx.profit > 0 ? '+' : '') + tx.profit.toFixed(4) : '-'}
                </td>
                <td>${tx.gasPrice.toFixed(1)} Gwei</td>
                <td>
                    <span class="status-badge ${statusClass}">
                        ${tx.status === 'success' ? '‚úì' : '‚úó'}
                    </span>
                </td>
                <td>
                    <button class="btn-icon" onclick="window.transactionsModule.showDetails('${tx.hash}')">
                        ‚ÑπÔ∏è
                    </button>
                </td>
            </tr>
        `;
    }
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
    formatDate(timestamp) {
        const date = new Date(timestamp * 1000);
        const now = new Date();
        const diff = now - date;
        
        // –ï—Å–ª–∏ –º–µ–Ω—å—à–µ —á–∞—Å–∞
        if (diff < 3600000) {
            return `${Math.floor(diff / 60000)} –º–∏–Ω. –Ω–∞–∑–∞–¥`;
        }
        
        // –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è
        if (date.toDateString() === now.toDateString()) {
            return date.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
        }
        
        // –ò–Ω–∞—á–µ –ø–æ–ª–Ω–∞—è –¥–∞—Ç–∞
        return date.toLocaleDateString('ru-RU', { 
            day: '2-digit', 
            month: '2-digit', 
            year: '2-digit',
            hour: '2-digit',
            minute: '2-digit'
        });
    }
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ö—ç—à–∞
    formatHash(hash) {
        return `${hash.slice(0, 8)}...${hash.slice(-6)}`;
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∫–∏ —Ç–∏–ø–∞
    getTypeLabel(type) {
        const labels = {
            'in': '–í—Ö–æ–¥—è—â–∞—è',
            'out': '–ò—Å—Ö–æ–¥—è—â–∞—è',
            'swap': '–û–±–º–µ–Ω',
            'arbitrage': '–ê—Ä–±–∏—Ç—Ä–∞–∂',
            'contract': '–ö–æ–Ω—Ç—Ä–∞–∫—Ç',
            'self': '–°–µ–±–µ'
        };
        return labels[type] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
    
    // –†–∞—Å—á–µ—Ç –æ–±—â–µ–π –ø—Ä–∏–±—ã–ª–∏
    calculateTotalProfit() {
        return this.transactions
            .filter(tx => tx.status === 'success')
            .reduce((sum, tx) => sum + tx.profit, 0);
    }
    
    // –ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    showDetails(hash) {
        const tx = this.transactions.find(t => t.hash === hash);
        if (!tx) return;
        
        // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –¥–µ—Ç–∞–ª—è–º–∏
        console.log('Transaction details:', tx);
        
        if (window.app && window.app.showNotification) {
            window.app.showNotification('info', `–î–µ—Ç–∞–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${hash.slice(0, 10)}...`);
        }
    }
    
    // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    goToPage(page) {
        const totalPages = Math.ceil(this.filteredTransactions.length / this.itemsPerPage);
        
        if (page < 1 || page > totalPages) return;
        
        this.currentPage = page;
        this.updateUI();
    }
    
    // –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π —Ç–∞–±–ª–∏—Ü—ã
    bindTableEvents() {
        // –§–∏–ª—å—Ç—Ä—ã
        const typeFilter = document.getElementById('filter-type');
        if (typeFilter) {
            typeFilter.value = this.filters.type;
            typeFilter.addEventListener('change', (e) => {
                this.filters.type = e.target.value;
                this.applyFilters();
                this.currentPage = 1;
                this.updateUI();
            });
        }
        
        const statusFilter = document.getElementById('filter-status');
        if (statusFilter) {
            statusFilter.value = this.filters.status;
            statusFilter.addEventListener('change', (e) => {
                this.filters.status = e.target.value;
                this.applyFilters();
                this.currentPage = 1;
                this.updateUI();
            });
        }
    }
    
    // –°–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–æ–≤
    resetFilters() {
        this.filters = {
            type: 'all',
            status: 'all',
            dateFrom: null,
            dateTo: null
        };
        this.currentPage = 1;
        this.applyFilters();
        this.updateUI();
    }
    
    // –≠–∫—Å–ø–æ—Ä—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    exportTransactions() {
        const csv = this.convertToCSV(this.filteredTransactions);
        const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
        const url = URL.createObjectURL(blob);
        const link = document.createElement('a');
        link.href = url;
        link.download = `transactions_${Date.now()}.csv`;
        link.click();
        URL.revokeObjectURL(url);
        
        if (window.app && window.app.showNotification) {
            window.app.showNotification('success', '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
        }
    }
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ CSV
    convertToCSV(transactions) {
        const headers = ['–í—Ä–µ–º—è', '–¢–∏–ø', '–•—ç—à', '–°—É–º–º–∞', '–¢–æ–∫–µ–Ω', '–ü—Ä–∏–±—ã–ª—å', 'Gas', '–°—Ç–∞—Ç—É—Å'];
        const rows = transactions.map(tx => [
            new Date(tx.timestamp * 1000).toISOString(),
            tx.type,
            tx.hash,
            tx.amount,
            tx.token,
            tx.profit,
            tx.gasPrice,
            tx.status
        ]);
        
        return [headers, ...rows].map(row => row.join(',')).join('\n');
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    async updateTransactions() {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        const walletAddress = localStorage.getItem('robot_wallet');
        if (!walletAddress) return;
        
        // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        await this.loadTransactions();
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    async refresh() {
        await this.loadTransactions();
        
        if (window.app && window.app.showNotification) {
            window.app.showNotification('success', '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
        }
    }
    
    // –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
    bindEvents() {
        // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –≤ bindTableEvents
    }
    
    // –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    startUpdates() {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        this.updateInterval = setInterval(() => {
            this.updateTransactions();
        }, 60000);
    }
    
    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    stopUpdates() {
        if (this.updateInterval) {
            clearInterval(this.updateInterval);
            this.updateInterval = null;
        }
    }
    
    // –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –º–æ–¥—É–ª—è
    destroy() {
        this.stopUpdates();
    }
}

// –î–µ–ª–∞–µ–º –º–æ–¥—É–ª—å –¥–æ—Å—Ç—É–ø–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω–æ
window.TransactionsModule = TransactionsModule;
window.transactionsModule = null; // –ë—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ app.js