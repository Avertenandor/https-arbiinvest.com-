// ========================================
// ArbiInvest - –ú–æ–¥—É–ª—å –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
// ========================================

class DashboardModule {
    constructor(app) {
        this.app = app;
        this.data = {
            totalProfit: 0,
            todayProfit: 0,
            totalTransactions: 0,
            successRate: 0,
            activePositions: 0,
            volume24h: 0,
            chartData: [],
            recentTransactions: []
        };
        this.charts = {};
        this.updateInterval = null;
        this.bscApiKey = 'RAI3FTD9W53JPYZ2AHW8IBH9BXUC71NRH1';
        this.bscApiUrl = 'https://api.bscscan.com/api';
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è
    async init() {
        console.log('üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Dashboard –º–æ–¥—É–ª—è...');
        await this.loadData();
        this.updateMetrics();
        this.bindEvents();
        this.startUpdates();
        return true;
    }
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    async loadData() {
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å BSC
            const walletAddress = localStorage.getItem('robot_wallet') || '0x0000000000000000000000000000000000000000';
            
            // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
            const balance = await this.getWalletBalance(walletAddress);
            
            // –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            const transactions = await this.getRecentTransactions(walletAddress);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            this.data = {
                totalProfit: balance * 0.15, // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –ø—Ä–∏–±—ã–ª—å 15%
                todayProfit: balance * 0.02,  // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –¥–Ω–µ–≤–Ω–∞—è –ø—Ä–∏–±—ã–ª—å 2%
                totalTransactions: transactions.length,
                successRate: 87.3,
                activePositions: 3,
                volume24h: balance * 2.5,
                chartData: this.generateChartData(),
                recentTransactions: this.formatTransactions(transactions)
            };
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            this.loadMockData();
        }
    }
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    loadMockData() {
        this.data = {
            totalProfit: 12.5847,
            todayProfit: 0.8234,
            totalTransactions: 1847,
            successRate: 87.3,
            activePositions: 5,
            volume24h: 284.7,
            chartData: this.generateChartData(),
            recentTransactions: this.generateMockTransactions()
        };
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫–æ—à–µ–ª—å–∫–∞
    async getWalletBalance(address) {
        try {
            const response = await fetch(`${this.bscApiUrl}?module=account&action=balance&address=${address}&apikey=${this.bscApiKey}`);
            const data = await response.json();
            
            if (data.status === '1') {
                return parseFloat(data.result) / 1e18; // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Wei –≤ BNB
            }
            return 0;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error);
            return 0;
        }
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    async getRecentTransactions(address) {
        try {
            const response = await fetch(`${this.bscApiUrl}?module=account&action=txlist&address=${address}&startblock=0&endblock=99999999&page=1&offset=10&sort=desc&apikey=${this.bscApiKey}`);
            const data = await response.json();
            
            if (data.status === '1') {
                return data.result || [];
            }
            return [];
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error);
            return [];
        }
    }
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    formatTransactions(transactions) {
        return transactions.slice(0, 5).map(tx => ({
            hash: tx.hash,
            pair: 'BNB/USDT', // –ü—Ä–∏–º–µ—Ä –ø–∞—Ä—ã
            type: tx.from.toLowerCase() === localStorage.getItem('robot_wallet')?.toLowerCase() ? 'sell' : 'buy',
            amount: parseFloat(tx.value) / 1e18,
            profit: Math.random() * 0.1 - 0.02, // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –ø—Ä–∏–±—ã–ª—å
            timestamp: parseInt(tx.timeStamp),
            gasPrice: parseFloat(tx.gasPrice) / 1e9 // –í Gwei
        }));
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    updateMetrics() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        this.animateValue('totalProfit', 0, this.data.totalProfit, 2000);
        this.animateValue('todayProfit', 0, this.data.todayProfit, 2000);
        this.animateValue('totalTransactions', 0, this.data.totalTransactions, 2000, 0);
        this.animateValue('successRate', 0, this.data.successRate, 2000, 1);
        this.animateValue('activePositions', 0, this.data.activePositions, 1000, 0);
        this.animateValue('volume24h', 0, this.data.volume24h, 2000, 1);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        this.updateTransactionsList();
    }
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π
    animateValue(id, start, end, duration, decimals = 4) {
        const element = document.getElementById(id);
        if (!element) return;
        
        const startTime = Date.now();
        const update = () => {
            const now = Date.now();
            const progress = Math.min((now - startTime) / duration, 1);
            const value = start + (end - start) * this.easeOutQuad(progress);
            
            if (decimals === 0) {
                element.textContent = Math.floor(value);
            } else {
                element.textContent = value.toFixed(decimals);
            }
            
            if (progress < 1) {
                requestAnimationFrame(update);
            }
        };
        
        requestAnimationFrame(update);
    }
    
    // –§—É–Ω–∫—Ü–∏—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏ –∞–Ω–∏–º–∞—Ü–∏–∏
    easeOutQuad(t) {
        return t * (2 - t);
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    updateTransactionsList() {
        const container = document.getElementById('recentTransactionsList');
        if (!container) return;
        
        if (this.data.recentTransactions.length === 0) {
            container.innerHTML = '<div class="no-data">–ù–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π</div>';
            return;
        }
        
        const html = this.data.recentTransactions.map(tx => `
            <div class="transaction-item">
                <div class="transaction-icon ${tx.type}">
                    ${tx.type === 'buy' ? 'üìà' : 'üìâ'}
                </div>
                <div class="transaction-info">
                    <div class="transaction-pair">${tx.pair}</div>
                    <div class="transaction-time">${this.formatRelativeTime(tx.timestamp)}</div>
                </div>
                <div class="transaction-details">
                    <div class="transaction-amount">${tx.amount.toFixed(4)} BNB</div>
                    <div class="transaction-profit ${tx.profit > 0 ? 'positive' : 'negative'}">
                        ${tx.profit > 0 ? '+' : ''}${tx.profit.toFixed(4)} BNB
                    </div>
                </div>
                <a href="https://bscscan.com/tx/${tx.hash}" target="_blank" class="transaction-link">
                    <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
                        <path d="M14 3v10h-4v2h6V3h-2zm-2 0H2v10h10V3zm-2 8H4V5h6v6z"/>
                    </svg>
                </a>
            </div>
        `).join('');
        
        container.innerHTML = html;
    }
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
    formatRelativeTime(timestamp) {
        const now = Date.now() / 1000;
        const diff = now - timestamp;
        
        if (diff < 60) return '–¢–æ–ª—å–∫–æ —á—Ç–æ';
        if (diff < 3600) return `${Math.floor(diff / 60)} –º–∏–Ω. –Ω–∞–∑–∞–¥`;
        if (diff < 86400) return `${Math.floor(diff / 3600)} —á. –Ω–∞–∑–∞–¥`;
        return `${Math.floor(diff / 86400)} –¥. –Ω–∞–∑–∞–¥`;
    }
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    generateChartData() {
        const data = [];
        const now = Date.now() / 1000;
        
        for (let i = 0; i < 24; i++) {
            data.push({
                label: `${23 - i}:00`,
                value: Math.random() * 0.5 + 0.2,
                timestamp: now - (23 - i) * 3600
            });
        }
        
        return data;
    }
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–∫–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    generateMockTransactions() {
        const pairs = ['BNB/USDT', 'CAKE/BNB', 'ETH/BNB', 'BTC/BNB', 'BUSD/USDT'];
        const transactions = [];
        
        for (let i = 0; i < 5; i++) {
            transactions.push({
                hash: '0x' + Math.random().toString(16).substr(2, 64),
                pair: pairs[Math.floor(Math.random() * pairs.length)],
                type: Math.random() > 0.5 ? 'buy' : 'sell',
                amount: Math.random() * 10,
                profit: Math.random() * 0.1 - 0.02,
                timestamp: Date.now() / 1000 - Math.random() * 3600,
                gasPrice: 3 + Math.random() * 2
            });
        }
        
        return transactions.sort((a, b) => b.timestamp - a.timestamp);
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    async refresh() {
        const refreshBtn = document.getElementById('refresh-data');
        if (refreshBtn) {
            refreshBtn.classList.add('loading');
            refreshBtn.disabled = true;
        }
        
        await this.loadData();
        this.updateMetrics();
        
        if (refreshBtn) {
            refreshBtn.classList.remove('loading');
            refreshBtn.disabled = false;
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if (window.app && window.app.showNotification) {
            window.app.showNotification('success', '–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
        }
    }
    
    // –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
    bindEvents() {
        // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ –≥—Ä–∞—Ñ–∏–∫–∞
        document.querySelectorAll('.chart-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                document.querySelectorAll('.chart-btn').forEach(b => b.classList.remove('active'));
                btn.classList.add('active');
                
                // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞
                console.log('–ü–µ—Ä–∏–æ–¥ –∏–∑–º–µ–Ω–µ–Ω:', btn.textContent);
            });
        });
    }
    
    // –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    startUpdates() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        this.updateInterval = setInterval(() => {
            this.updateLiveData();
        }, 30000);
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∂–∏–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    async updateLiveData() {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω—è—é—â–∏–µ—Å—è –º–µ—Ç—Ä–∏–∫–∏
        const walletAddress = localStorage.getItem('robot_wallet') || '0x0000000000000000000000000000000000000000';
        const balance = await this.getWalletBalance(walletAddress);
        
        if (balance > 0) {
            // –ü–ª–∞–≤–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
            this.animateValue('totalProfit', this.data.totalProfit, balance * 0.15, 1000);
            this.animateValue('todayProfit', this.data.todayProfit, balance * 0.02, 1000);
            
            this.data.totalProfit = balance * 0.15;
            this.data.todayProfit = balance * 0.02;
        }
    }
    
    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    stopUpdates() {
        if (this.updateInterval) {
            clearInterval(this.updateInterval);
            this.updateInterval = null;
        }
    }
    
    // –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ –º–æ–¥—É–ª—è
    destroy() {
        this.stopUpdates();
        
        // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        document.querySelectorAll('.chart-btn').forEach(btn => {
            btn.replaceWith(btn.cloneNode(true));
        });
    }
}

// –î–µ–ª–∞–µ–º –º–æ–¥—É–ª—å –¥–æ—Å—Ç—É–ø–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω–æ
window.DashboardModule = DashboardModule;