// ========================================
// ArbiInvest - –ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
// ========================================

class ArbiInvestApp {
    constructor() {
        this.isInitialized = false;
        this.currentSection = 'dashboard';
        this.walletAddress = null;
        this.networkId = 56; // BSC –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        this.welcomeText = `–ü—Ä–∏–≤–µ—Ç. –≠—Ç–æ –Ω–∞—Å—Ç–æ—è—â–∏–π —Å–∞–π—Ç –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–≤—è–∑–∞–Ω —Ä–µ–∞–ª—å–Ω—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π –±–æ—Ç. –ò –¥–æ—Å—Ç—É–ø–µ–Ω –æ–Ω —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏–º —Ç–æ –µ—Å—Ç—å —Ä–µ–ø—Ç–∏–ª–æ–∏–¥–∞–º. 
–ï—Å–ª–∏ –≤—ã –¥—É–º–∞–µ—Ç–µ —á—Ç–æ –≤–∞—Å —Å—é–¥–∞ –ø—É—Å—Ç—è—Ç –ø—Ä–æ—Å—Ç–æ –ø–æ—Ç–æ–º—É —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –¥–µ–Ω—å–≥–∏ —Ç–æ –Ω–µ—Ç)) –ù–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–∫ –º—ã –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º. 
–£–≤–∞–∂–∞–µ–º—ã–µ —Ä–µ–ø—Ç–∏–ª–æ–∏–¥—ã –ø—Ä–æ—à—É –ø—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é.`;
        
        this.typingSpeed = 35; // –°–∫–æ—Ä–æ—Å—Ç—å –ø–µ—á–∞—Ç–∞–Ω–∏—è –¥–ª—è –ª—é–¥–µ–π 62-64 –ª–µ—Ç (–º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã –Ω–∞ —Å–∏–º–≤–æ–ª)
        this.modules = {};
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    async init() {
        console.log('üöÄ ArbiInvest App starting...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        if (window.authModule && window.authModule.checkExistingAuth()) {
            console.log('‚úÖ Existing auth found, skipping welcome screen');
            // –ü—Ä—è–º–æ–π –≤—Ö–æ–¥ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö
            this.quickEnterApp();
        } else {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
            await this.showWelcomeScreen();
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞
        this.initEventListeners();
        this.loadSettings();
        
        console.log('‚úÖ ArbiInvest App initialized');
    }
    
    // –≠–∫—Ä–∞–Ω –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –ø–µ—á–∞—Ç–∞–Ω–∏—è
    async showWelcomeScreen() {
        const welcomeScreen = document.getElementById('welcome-screen');
        const typingText = document.getElementById('typing-text');
        const enterButton = document.getElementById('enter-site');
        const cursor = document.querySelector('.cursor');
        
        if (!welcomeScreen || !typingText) return;
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–µ—á–∞—Ç–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        let charIndex = 0;
        const lines = this.welcomeText.split('\n');
        
        for (let lineIndex = 0; lineIndex < lines.length; lineIndex++) {
            const line = lines[lineIndex].trim();
            if (!line) continue;
            
            // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏
            const paragraph = document.createElement('p');
            paragraph.className = 'typing-paragraph';
            typingText.appendChild(paragraph);
            
            // –ü–µ—á–∞—Ç–∞–µ–º —Å–∏–º–≤–æ–ª—ã
            for (let i = 0; i < line.length; i++) {
                paragraph.textContent += line[i];
                
                // –°–ª—É—á–∞–π–Ω–∞—è –≤–∞—Ä–∏–∞—Ü–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
                const delay = this.typingSpeed + Math.random() * 20 - 10;
                await this.sleep(delay);
                
                // –ü–∞—É–∑–∞ –ø–æ—Å–ª–µ –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
                if (['.', '!', '?', ')'].includes(line[i])) {
                    await this.sleep(200);
                }
            }
            
            // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å—Ç—Ä–æ–∫–∞–º–∏
            if (lineIndex < lines.length - 1) {
                await this.sleep(400);
            }
        }
        
        // –£–±–∏—Ä–∞–µ–º –∫—É—Ä—Å–æ—Ä –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
        cursor.style.display = 'none';
        enterButton.style.display = 'flex';
        enterButton.style.animation = 'fadeIn 0.5s ease-in';
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤—Ö–æ–¥–∞
        enterButton.addEventListener('click', () => {
            this.enterSite();
        });
    }
    
    // –í—Ö–æ–¥ –Ω–∞ —Å–∞–π—Ç - —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    enterSite() {
        console.log('üîê Enter site clicked');
        
        // –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ
        if (window.authModule) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            if (window.authModule.checkExistingAuth()) {
                console.log('‚úÖ User already authorized, entering app');
                // –ï—Å–ª–∏ —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, —Å—Ä–∞–∑—É –≤—Ö–æ–¥–∏–º
                this.directEnterApp();
            } else {
                console.log('üîê Showing auth screen');
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ (—Ö–æ–º—è–∫ –∏–ª–∏ —Ä–µ–ø—Ç–∏–ª–æ–∏–¥)
                window.authModule.showAuthScreen();
            }
        } else {
            console.error('‚ùå Auth module not loaded!');
            // –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å
            setTimeout(() => {
                if (window.authModule) {
                    window.authModule.showAuthScreen();
                } else {
                    alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
                }
            }, 1000);
        }
    }
    
    // –ë—ã—Å—Ç—Ä—ã–π –≤—Ö–æ–¥ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    quickEnterApp() {
        const welcomeScreen = document.getElementById('welcome-screen');
        const app = document.getElementById('app');
        
        // –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫—Ä–∞–Ω
        if (welcomeScreen) {
            welcomeScreen.style.display = 'none';
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app.style.display = 'block';
        app.style.opacity = '1';
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
        this.initModules();
        this.startUpdates();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const authWallet = localStorage.getItem('auth_wallet');
        if (authWallet) {
            this.showNotification('success', `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, —Ä–µ–ø—Ç–∏–ª–æ–∏–¥!`, 3000);
        }
    }
    
    // –ü—Ä—è–º–æ–π –≤—Ö–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (–ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
    directEnterApp() {
        const welcomeScreen = document.getElementById('welcome-screen');
        const app = document.getElementById('app');
        
        // –ü–ª–∞–≤–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞
        welcomeScreen.style.opacity = '0';
        welcomeScreen.style.transition = 'opacity 0.5s ease-out';
        
        setTimeout(() => {
            welcomeScreen.style.display = 'none';
            app.style.display = 'block';
            app.style.opacity = '0';
            
            // –§–æ—Ä—Å–∏—Ä—É–µ–º reflow
            app.offsetHeight;
            
            app.style.transition = 'opacity 0.5s ease-in';
            app.style.opacity = '1';
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            this.initModules();
            this.startUpdates();
        }, 500);
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π
    async initModules() {
        try {
            // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ BSC
            await this.connectToBSC();
            
            // –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π
            if (typeof DashboardModule !== 'undefined') {
                this.modules.dashboard = new DashboardModule(this);
                await this.modules.dashboard.init();
            }
            
            if (typeof WalletModule !== 'undefined') {
                this.modules.wallet = new WalletModule(this);
                window.walletModule = this.modules.wallet;
                await this.modules.wallet.init();
            }
            
            if (typeof TransactionsModule !== 'undefined') {
                this.modules.transactions = new TransactionsModule(this);
                window.transactionsModule = this.modules.transactions;
                await this.modules.transactions.init();
            }
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ–∫—Ü–∏–∏ –º–µ–º–ø—É–ª–∞
            console.log('üîç Loading Mempool Section...');
            try {
                const MempoolSection = (await import('../modules/mempool/mempool-section.js')).default;
                this.modules.mempool = new MempoolSection(this);
                await this.modules.mempool.init();
                console.log('‚úÖ Mempool section initialized');
            } catch (error) {
                console.warn('‚ö†Ô∏è Mempool section not loaded:', error);
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            this.updateConnectionStatus('connected');
            
        } catch (error) {
            console.error('Error initializing modules:', error);
            this.updateConnectionStatus('error');
        }
    }
    
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Binance Smart Chain
    async connectToBSC() {
        const config = window.CONFIG || {};
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è BSC
        this.etherscanApiKey = 'RAI3FTD9W53JPYZ2AHW8IBH9BXUC71NRH1'; // –í–∞—à –∫–ª—é—á
        this.apiUrl = 'https://api.bscscan.com/api';
        this.explorerUrl = 'https://bscscan.com';
        
        console.log('üîó Connected to Binance Smart Chain');
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    updateConnectionStatus(status) {
        const statusElement = document.getElementById('connection-status');
        if (!statusElement) return;
        
        const statusDot = statusElement.querySelector('.status-dot');
        const statusText = statusElement.querySelector('.status-text');
        
        switch (status) {
            case 'connected':
                statusDot.className = 'status-dot connected';
                statusText.textContent = '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ BSC';
                break;
            case 'connecting':
                statusDot.className = 'status-dot connecting';
                statusText.textContent = '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...';
                break;
            case 'error':
                statusDot.className = 'status-dot error';
                statusText.textContent = '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è';
                break;
            default:
                statusDot.className = 'status-dot';
                statusText.textContent = '–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ';
        }
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    initEventListeners() {
        // –ù–∞–≤–∏–≥–∞—Ü–∏—è
        document.querySelectorAll('.nav-link').forEach(link => {
            link.addEventListener('click', (e) => {
                e.preventDefault();
                const section = link.getAttribute('data-section') || link.getAttribute('href').substring(1);
                this.navigateTo(section);
            });
        });
        
        // –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        const refreshBtn = document.getElementById('refresh-data');
        if (refreshBtn) {
            refreshBtn.addEventListener('click', () => {
                this.refreshData();
            });
        }
        
        // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ç–µ–º—ã
        const themeToggle = document.getElementById('theme-toggle');
        if (themeToggle) {
            themeToggle.addEventListener('click', () => {
                this.toggleTheme();
            });
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–æ–ª–ª–∞ –¥–ª—è —Ö–µ–¥–µ—Ä–∞
        let lastScroll = 0;
        window.addEventListener('scroll', () => {
            const header = document.querySelector('.header');
            const currentScroll = window.pageYOffset;
            
            if (currentScroll > 100) {
                header.classList.add('scrolled');
            } else {
                header.classList.remove('scrolled');
            }
            
            lastScroll = currentScroll;
        });
    }
    
    // –ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É —Å–µ–∫—Ü–∏—è–º–∏
    navigateTo(sectionId) {
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–µ–∫—Ü–∏–∏
        document.querySelectorAll('.section').forEach(section => {
            section.classList.remove('active');
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é —Å–µ–∫—Ü–∏—é
        const targetSection = document.getElementById(sectionId);
        if (targetSection) {
            targetSection.classList.add('active');
            this.currentSection = sectionId;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å—Å—ã–ª–∫—É
            document.querySelectorAll('.nav-link').forEach(link => {
                link.classList.remove('active');
                if (link.getAttribute('href') === `#${sectionId}` || 
                    link.getAttribute('data-section') === sectionId) {
                    link.classList.add('active');
                }
            });
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–µ–∫—Ü–∏–∏
            if (this.modules[sectionId]) {
                this.modules[sectionId].load();
            }
        }
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    async refreshData() {
        const refreshBtn = document.getElementById('refresh-data');
        if (refreshBtn) {
            refreshBtn.classList.add('loading');
            refreshBtn.disabled = true;
        }
        
        try {
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ –≤—Å–µ—Ö –º–æ–¥—É–ª—è—Ö
            const updatePromises = Object.values(this.modules).map(module => {
                if (module.refresh) {
                    return module.refresh();
                }
            });
            
            await Promise.all(updatePromises);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            this.showNotification('success', '–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
            
        } catch (error) {
            console.error('Error refreshing data:', error);
            this.showNotification('error', '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö');
        } finally {
            if (refreshBtn) {
                refreshBtn.classList.remove('loading');
                refreshBtn.disabled = false;
            }
        }
    }
    
    // –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    startUpdates() {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
        setInterval(() => {
            if (this.modules.wallet) {
                this.modules.wallet.updateBalance();
            }
        }, 10000);
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        setInterval(() => {
            if (this.modules.transactions) {
                this.modules.transactions.updateTransactions();
            }
        }, 15000);
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–∞–∑–∞
        setInterval(() => {
            this.updateGasPrice();
        }, 10000);
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –≥–∞–∑–∞
    async updateGasPrice() {
        try {
            const response = await fetch(`${this.apiUrl}?module=gastracker&action=gasoracle&apikey=${this.etherscanApiKey}`);
            const data = await response.json();
            
            if (data.status === '1' && data.result) {
                const gasPrice = data.result.SafeGasPrice;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                const gasPriceElements = document.querySelectorAll('[data-gas-price]');
                gasPriceElements.forEach(el => {
                    el.textContent = gasPrice;
                });
            }
        } catch (error) {
            console.error('Error updating gas price:', error);
        }
    }
    
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
    toggleTheme() {
        const body = document.body;
        const currentTheme = body.getAttribute('data-theme') || 'dark';
        const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
        
        body.setAttribute('data-theme', newTheme);
        localStorage.setItem('theme', newTheme);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É
        const themeToggle = document.getElementById('theme-toggle');
        if (themeToggle) {
            themeToggle.innerHTML = newTheme === 'dark' ? 
                '<svg>...</svg>' : '<svg>...</svg>';
        }
    }
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    loadSettings() {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–º—É
        const savedTheme = localStorage.getItem('theme') || 'dark';
        document.body.setAttribute('data-theme', savedTheme);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞
        this.walletAddress = localStorage.getItem('wallet_address');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥—Ä—É–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        const settings = JSON.parse(localStorage.getItem('settings') || '{}');
        this.settings = { ...this.defaultSettings, ...settings };
    }
    
    // –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    showNotification(type, message, duration = 3000) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
        if (window.notifications) {
            return window.notifications.show(type, message, { duration });
        }
        
        // Fallback –Ω–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é
        const container = document.getElementById('notificationContainer') || this.createNotificationContainer();
        
        const notification = document.createElement('div');
        notification.className = `notification ${type}`;
        notification.innerHTML = `
            <div class="notification-icon">${this.getNotificationIcon(type)}</div>
            <div class="notification-content">
                <div class="notification-message">${message}</div>
            </div>
        `;
        
        container.appendChild(notification);
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        setTimeout(() => {
            notification.classList.add('show');
        }, 10);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ
        setTimeout(() => {
            notification.classList.remove('show');
            setTimeout(() => {
                notification.remove();
            }, 300);
        }, duration);
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    createNotificationContainer() {
        const container = document.createElement('div');
        container.id = 'notificationContainer';
        container.className = 'notification-container';
        document.body.appendChild(container);
        return container;
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    getNotificationIcon(type) {
        const icons = {
            success: '‚úì',
            error: '‚úï',
            warning: '‚ö†',
            info: '‚Ñπ'
        };
        return icons[type] || icons.info;
    }
    
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏
    sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª
    formatNumber(number, decimals = 2) {
        return new Intl.NumberFormat('ru-RU', {
            minimumFractionDigits: decimals,
            maximumFractionDigits: decimals
        }).format(number);
    }
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞
    formatAddress(address, start = 6, end = 4) {
        if (!address) return '0x0000...0000';
        return `${address.slice(0, start)}...${address.slice(-end)}`;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    console.log('üöÄ DOMContentLoaded - initializing app');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –µ—Å–ª–∏ –æ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω
    if (window.authModule && window.authModule.init) {
        console.log('üîê Initializing auth module');
        window.authModule.init();
    } else {
        console.warn('‚ö†Ô∏è Auth module not found or not loaded');
    }
    
    // –°–æ–∑–¥–∞–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    window.app = new ArbiInvestApp();
    window.app.init();
});