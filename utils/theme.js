// ========================================
// ArbiInvest - –ú–æ–¥—É–ª—å —Ç–µ–º—ã
// ========================================

class ThemeModule {
    constructor() {
        this.currentTheme = 'dark';
        this.themes = {
            dark: {
                name: '–¢–µ–º–Ω–∞—è',
                class: 'theme-dark',
                colors: {
                    primary: '#6366f1',
                    background: '#0f0f0f',
                    surface: '#1a1a1a',
                    text: '#e3e3e3'
                }
            },
            light: {
                name: '–°–≤–µ—Ç–ª–∞—è',
                class: 'theme-light',
                colors: {
                    primary: '#4f46e5',
                    background: '#ffffff',
                    surface: '#f3f4f6',
                    text: '#111827'
                }
            }
        };
    }
    
    init() {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Ç–µ–º—É
        const savedTheme = localStorage.getItem('theme') || 'dark';
        this.setTheme(savedTheme);
        
        // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        this.bindEvents();
    }
    
    setTheme(themeName) {
        if (!this.themes[themeName]) return;
        
        this.currentTheme = themeName;
        const theme = this.themes[themeName];
        
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–ª–∞—Å—Å—ã —Ç–µ–º
        Object.values(this.themes).forEach(t => {
            document.body.classList.remove(t.class);
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–ª–∞—Å—Å —Ç–µ–º—ã
        document.body.classList.add(theme.class);
        document.body.setAttribute('data-theme', themeName);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        const root = document.documentElement;
        Object.entries(theme.colors).forEach(([key, value]) => {
            root.style.setProperty(`--color-${key}`, value);
        });
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä
        localStorage.setItem('theme', themeName);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è
        this.updateToggleIcon();
    }
    
    toggleTheme() {
        const newTheme = this.currentTheme === 'dark' ? 'light' : 'dark';
        this.setTheme(newTheme);
    }
    
    updateToggleIcon() {
        const toggle = document.getElementById('theme-toggle');
        if (!toggle) return;
        
        const icon = this.currentTheme === 'dark' ? 
            '‚òÄÔ∏è' : 'üåô';
        
        toggle.innerHTML = `<span style="font-size: 20px;">${icon}</span>`;
    }
    
    bindEvents() {
        const toggle = document.getElementById('theme-toggle');
        if (toggle) {
            toggle.addEventListener('click', () => this.toggleTheme());
        }
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–º–µ–Ω–∞ —Ç–µ–º—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
        if (window.matchMedia) {
            const darkModeQuery = window.matchMedia('(prefers-color-scheme: dark)');
            darkModeQuery.addEventListener('change', (e) => {
                if (localStorage.getItem('theme-auto') === 'true') {
                    this.setTheme(e.matches ? 'dark' : 'light');
                }
            });
        }
    }
}

// –°–æ–∑–¥–∞–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥—É–ª—å —Ç–µ–º—ã
window.themeModule = new ThemeModule();
document.addEventListener('DOMContentLoaded', () => {
    window.themeModule.init();
});